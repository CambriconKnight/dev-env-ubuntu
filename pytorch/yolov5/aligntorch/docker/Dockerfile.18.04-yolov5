#/*************************************************************************
# * Copyright (C) [2019] by Cambricon, Inc. All rights reserved
# *
# *  Licensed under the Apache License, Version 2.0 (the "License");
# *  you may not use this file except in compliance with the License.
# *  You may obtain a copy of the License at
# *
# *     http://www.apache.org/licenses/LICENSE-2.0
# *
# * The above copyright notice and this permission notice shall be included in
# * all copies or substantial portions of the Software.
# * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# * THE SOFTWARE.
# *************************************************************************/

# 1. build image
# (1) build image without cntoolkit and cnstream: docker build -f Dockerfile.18.04 -t ubuntu18_cnstream:v1 .
# (2) build image with cntoolkit installed and without cnstream:
#   a. make sure the toolkit_package is in your current directory
#   b. docker build -f Dockerfile.18.04 --build-arg toolkit_package=${toolkit_package_name} -t ubuntu18_cnstream:v1 .
# (3) build image with cntoolkit installed and with cnstream code built:
#   a. make sure the toolkit_package is in your current directory
#   b. docker build -f Dockerfile.18.04 --build-arg toolkit_package=${toolkit_package_name} --build-arg with_cnstream_code=yes -t ubuntu18_cnstream:v1 .
# 2. start container: docker run -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY --privileged -v /dev:/dev --net=host --ipc=host --pid=host -v $HOME/.Xauthority -it --name container_name  -v $PWD:/workspace ubuntu_cnstream:v1

FROM ubuntu:18.04

COPY . /temp/
WORKDIR /temp/
RUN mkdir -p /root/.pip/ && \
    cp pip.conf /root/.pip/ && \
    cp sources_18.04.list /etc/apt/sources.list

#ARG toolkit_package=""
#ARG with_cnstream_code=no

ENV DEBIAN_FRONTEND=noninteractive
#RUN echo -e 'nameserver 114.114.114.114' > /etc/resolv.conf

RUN apt-get update && apt-get upgrade -y && apt-get install -y --no-install-recommends apt-utils \
            libopencv-dev python3.6  python3-dev \
            libsdl2-dev wget \ 
            git build-essential cmake make vim curl libcurl4-openssl-dev \
            python3-tk  \
            python3-pip  \
            python-pip  \
           net-tools 


#设置python 优先级 python2-100,python3-99，python2 高
ENV update-alternatives --install /usr/bin/python python /usr/bin/python3 99 \
    && sed -i "s/\/usr\/bin\/python.*/\/usr\/bin\/python3/g" /usr/bin/pip3
    #链接pip 默认为pip2
 RUN   ln -s /usr/bin/pip3  /usr/bin/pip -f
 RUN   ln -s /usr/bin/python3  /usr/bin/python -f

#ENV DEBIAN_FRONTEND=noninteractive
RUN python -m pip install --upgrade pip
RUN pip3 install -r requirements.txt 


# 3.Set ENV && Clean
ENV LANG C.UTF-8
ENV TIME_ZONE Asia/Shanghai
RUN echo "${TIME_ZONE}" > /etc/timezone && \
    ln -sf /usr/share/zoneinfo/${TIME_ZONE} /etc/localtime && \
    rm -rf /temp/ && rm -rf /var/lib/apt/lists/* && \
    apt-get clean

# 4.Set WorkDir
WORKDIR /home/share/